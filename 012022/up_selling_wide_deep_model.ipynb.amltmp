{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import torch\n",
        "\n",
        "from collections import namedtuple\n",
        "from itertools import chain\n",
        "from sklearn.preprocessing import StandardScaler, PolynomialFeatures, LabelEncoder, OneHotEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "import torch.autograd as autograd\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torch.autograd import Variable\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "id": "eRA3EvE7miSw",
        "gather": {
          "logged": 1646066257346
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "users = pd.read_csv(\"data/up-selling/peotv/peoTV_user_content.csv\")\n",
        "ratings = pd.read_csv(\"data/up-selling/peotv/azure/peoTV_user_ratings.csv\")\n",
        "packages = pd.read_csv(\"data/up-selling/peotv/peoTV_package_content.csv\")"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "id": "5iFR9S3tmiS7",
        "gather": {
          "logged": 1646066258774
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "USER_COLUMNS = [ \"ACCOUNT_NUM.hash\", \"Voice_INCOMING_Scaled\", \n",
        "            \"Location_Identifier\", \"Location_Node\",  \"Package_Type_and_Medium\", \"Model\", \"Service_Status\",\n",
        "            \"Voice_OUTGOING_Scaled\", \"IDD_INCOMING_Scaled\", \"IDD_incoming_country\",\n",
        "            \"IDD_OUTGOING_Scaled\", \"IDD_outgoing_country\", \"BB_Scaled\", \"BB_Package\", \"GENDER\", \"AGE\",\n",
        "            \"Subscription\", \"Sub_Type\", \"Sub_Usage\", \"Sub_Type_State\", \"Megaline_Package\", \n",
        "            \"Megaline_Medium\", \"Megaline_Rental_Scaled\", \"FTTH_Package\",\n",
        "            \"FTTH_Month_Subscribed\", \"FTTH_Medium\", \"FTTH_Rental_Scaled\", \"LTE_Package\", \"LTE_Medium\",\"LTE_Rental_Scaled\",\n",
        "            \"VAS_Package\", \"Product_Type\", \"VAS_Medium\", \"VAS_Rental_Scaled\", \"Sub_Update_Status\", \"Sub_Update\",\n",
        "            \"BB_Extra_GB_Amount\", \"BB_Extra_GB_Hour_Subscribed\", \"BB_Extra_GB_Usage_Times\",\n",
        "            \"BB_Extra_GB_Purchased_Scaled\", \"BB_Extra_GB_Subscribed_Night\" ,\"BB_Extra_GB_Subscribed_Day\",\n",
        "            \"BB_Extra_GB_Rental_Scaled\", \"Peo_Extra_Channels_Cumulative_Rental\", \"Peo_Extra_Channels_Purchased_Scaled\",\n",
        "            \"Peo_Extra_Channels_Purchased_Categorical\", \"Bill_Outstanding_Balance\", \"Bill_Billing_Status\",\n",
        "            \"Payment_Status\", \"Package_Formatted\", \"TARIFF_DESC\", \"TARIFF_NAME\", \"Having_Insurance\",\n",
        "            \"Having_Senior_Citizen_Scaled\",\"Having_Kids_at_Home_Scaled\",\"SMEs_Scaled\",\n",
        "            \"Having_Teenagers_Students_Scaled\",\"Having_Working_Professionals_Scaled\",\"Having_Family_Member_Abroad_Scaled\",\n",
        "            \"Tamil_Customer\"]\n",
        "\n",
        "PACKAGE_COLUMNS = [\"package\", 'Title', 'Price', 'Monthly_Rental',\n",
        "            'PEOTV_No_of_Channels', 'PEOTV_Foreign_Channels','PEOTV_Local_Channels', 'PEOTV_Movie_Channels', \n",
        "            'PEOTV_Kids_Channels','PEOTV_Religious_Channels', 'PEOTV_Tamil_Channels','PEOTV_Educational_Channels', \n",
        "            'PEOTV_Music_Channels','PEOTV_Sports_Channels', 'PEOTV_News_Channels', 'PEOTV_HD_Pack']\n",
        "\n",
        "LABEL_COLUMN = \"package\"\n",
        "USER_COULMN = \"user\"\n",
        "RATING_COLUMN = \"ratings\"\n",
        "OUTLIER_COLUMNS = [\"Voice_INCOMING_Outlier\",\"Voice_OUTGOING_Outlier\"]"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "id": "G4grH7JA5J2G",
        "gather": {
          "logged": 1646066258877
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Functions for Pre Processing"
      ],
      "metadata": {
        "id": "v1vluHgg2SIX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# one hot encoder\n",
        "def oneHotEncoder(array_1d):\n",
        "    label = LabelEncoder().fit_transform(array_1d)\n",
        "    label = label.reshape(len(label), 1)\n",
        "    one_hot = OneHotEncoder(sparse=False).fit_transform(label)\n",
        "    return one_hot\n",
        "\n",
        "# min-max scaler\n",
        "def minMaxScale(array_2d):\n",
        "    return MinMaxScaler().fit_transform(array_2d)\n",
        "\n",
        "# Turkey's box-plot method to clip outliers\n",
        "def outliers(s, replace=np.nan):\n",
        "    Q1, Q3 = np.percentile(s, [25 ,75])\n",
        "    IQR = Q3-Q1\n",
        "    return s.where((s > (Q1 - 1.5 * IQR)) & (s < (Q3 + 1.5 * IQR)), replace)\n",
        "\n",
        "# clip outliers\n",
        "def drop_numerical_outliers(df, cols):\n",
        "  df[cols] = df[cols].apply(outliers)\n",
        "  return df\n",
        "\n",
        "# handle pre-defined outliers\n",
        "def handle_outliers(df, cols):\n",
        "  for col in cols:\n",
        "    df = df[(df[col] != \"YES\")]\n",
        "  return df\n",
        "\n",
        "# drop unwanted cols\n",
        "def drop_cols(df, columns):\n",
        "  cols_to_drop = []\n",
        "  for col in columns:\n",
        "    if col not in df.columns:\n",
        "      cols_to_drop.append(col)\n",
        "  return df.drop(cols_to_drop, axis=1)"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "id": "tX9WS7wN2Whv",
        "gather": {
          "logged": 1646066259033
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Pre processing"
      ],
      "metadata": {
        "id": "0hNJM9tYmiS9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "  users.drop([\"Unnamed: 0\"], axis=1, inplace=True)\n",
        "  ratings.drop([\"Unnamed: 0\"], axis=1, inplace=True)\n",
        "  packages.drop([\"Unnamed: 0\"], axis=1, inplace=True)\n",
        "except:\n",
        "  pass\n",
        "\n",
        "# func to define labels based on most rated items\n",
        "# user_ratings[RANK_COLUMN] = user_ratings.groupby(\"ACCOUNT_NUM.hash\")['ratings'].rank(method='first', ascending=False)\n",
        "\n",
        "# drop unused columns for analysis\n",
        "users.drop(columns=[col for col in users if col not in USER_COLUMNS], inplace=True)\n",
        "packages.drop(columns=[col for col in packages if col not in PACKAGE_COLUMNS], inplace=True)\n",
        "\n",
        "users.rename(columns={\"ACCOUNT_NUM.hash\":USER_COULMN},inplace=True)\n",
        "ratings.rename(columns={\"ACCOUNT_NUM.hash\":USER_COULMN},inplace=True)\n",
        "ratings.sort_values(by=[USER_COULMN,RATING_COLUMN],inplace=True,ascending=False)"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "id": "Xr8eJxsL4xN9",
        "gather": {
          "logged": 1646066259146
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Data quality\n",
        "print('Duplicated rows in ratings file: ' + str(ratings.duplicated().sum()))\n",
        "\n",
        "n_users = ratings[USER_COULMN].unique().shape[0]\n",
        "n_packages = ratings[LABEL_COLUMN].unique().shape[0]\n",
        "\n",
        "print('Number of users: {}'.format(n_users))\n",
        "print('Number of packages: {}'.format(n_packages))\n",
        "print('Sparsity: {:4.3f}%'.format(float(ratings.shape[0]) / float(n_users*n_packages) * 100))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Duplicated rows in ratings file: 70144\nNumber of users: 19019\nNumber of packages: 49\nSparsity: 17.106%\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a7LS6VthmiS8",
        "outputId": "97638b40-e4c3-47e3-e2d4-5b2984442b6d",
        "gather": {
          "logged": 1646066259264
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rating_package = pd.merge(ratings,packages,how='left',on=LABEL_COLUMN)"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "id": "YnAKI-esmiTB",
        "gather": {
          "logged": 1646066259355
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "final_df = pd.merge(rating_package,users,how='left',on=USER_COULMN)"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {
        "id": "RwkvlfQ4miTD",
        "gather": {
          "logged": 1646066260245
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Selection"
      ],
      "metadata": {
        "id": "oIBGjirqA3DK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "le_data = final_df.copy()\n",
        "\n",
        "ALL_COLUMNS = list(le_data.columns)\n",
        "ALL_COLUMNS.remove(LABEL_COLUMN)\n",
        "ALL_COLUMNS.remove(USER_COULMN)\n",
        "CONTINUOUS_COLUMNS = list(le_data._get_numeric_data().columns)\n",
        "CONTINUOUS_COLUMNS.remove(RATING_COLUMN)\n",
        "CATEGORICAL_COLUMNS = list(set(ALL_COLUMNS) - set(CONTINUOUS_COLUMNS))\n",
        "\n",
        "for c in CATEGORICAL_COLUMNS:\n",
        "    le = LabelEncoder()\n",
        "    le_data[c] = le.fit_transform(final_df[c])"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "id": "X18c4RuTA87U",
        "gather": {
          "logged": 1646066262561
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cor_df = le_data.drop(columns=[col for col in le_data if col not in ALL_COLUMNS])\n",
        "corr = cor_df.corr()\n",
        "sns.heatmap(corr)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7fa5091595c0>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "ici8SwIyA8os",
        "outputId": "47197f2f-365b-4bdd-f578-8aecebcc41ca",
        "gather": {
          "logged": 1646066265744
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# select columns (selected features)\n",
        "cols = np.full((corr.shape[0],), True, dtype=bool)\n",
        "for i in range(corr.shape[0]):\n",
        "    for j in range(i+1, corr.shape[0]):\n",
        "        if corr.iloc[i,j] >= 0.9:\n",
        "            if cols[j]:\n",
        "                cols[j] = False\n",
        "\n",
        "selected_columns = cor_df.columns[cols]\n",
        "print(\"Selected Columns\", selected_columns)\n",
        "print(\"\\nSelected no of columns\", len(selected_columns))\n",
        "\n",
        "# final dataframe to merge model predictions\n",
        "le_data = le_data[[USER_COULMN,LABEL_COLUMN,RATING_COLUMN] + list(selected_columns)]\n",
        "\n",
        "# for column list generation\n",
        "data = final_df[[USER_COULMN,LABEL_COLUMN,RATING_COLUMN] + list(selected_columns)]"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Selected Columns Index(['ratings', 'Title', 'Price', 'Monthly_Rental', 'PEOTV_Movie_Channels',\n       'PEOTV_Tamil_Channels', 'PEOTV_HD_Pack', 'Voice_INCOMING_Scaled',\n       'Location_Identifier', 'Location_Node', 'Package_Type_and_Medium',\n       'Model', 'Voice_OUTGOING_Scaled', 'IDD_INCOMING_Scaled',\n       'IDD_incoming_country', 'IDD_OUTGOING_Scaled', 'IDD_outgoing_country',\n       'BB_Scaled', 'GENDER', 'AGE', 'Subscription', 'Sub_Type', 'Sub_Usage',\n       'Sub_Type_State', 'Megaline_Package', 'Megaline_Rental_Scaled',\n       'FTTH_Month_Subscribed', 'FTTH_Rental_Scaled', 'LTE_Package',\n       'LTE_Rental_Scaled', 'VAS_Package', 'Product_Type', 'VAS_Rental_Scaled',\n       'Sub_Update', 'BB_Extra_GB_Amount', 'BB_Extra_GB_Hour_Subscribed',\n       'BB_Extra_GB_Usage_Times', 'BB_Extra_GB_Subscribed_Night',\n       'BB_Extra_GB_Subscribed_Day', 'Peo_Extra_Channels_Cumulative_Rental',\n       'Peo_Extra_Channels_Purchased_Categorical', 'Bill_Outstanding_Balance',\n       'Bill_Billing_Status', 'Package_Formatted', 'TARIFF_DESC',\n       'TARIFF_NAME', 'Having_Insurance', 'Having_Senior_Citizen_Scaled',\n       'Having_Kids_at_Home_Scaled', 'SMEs_Scaled',\n       'Having_Teenagers_Students_Scaled',\n       'Having_Working_Professionals_Scaled',\n       'Having_Family_Member_Abroad_Scaled', 'Tamil_Customer'],\n      dtype='object')\n\nSelected no of columns 54\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GF45IW0tCpoc",
        "outputId": "2718bb70-9bd6-47df-ddc0-19ef3bcc4bad",
        "gather": {
          "logged": 1646066265975
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# resetting parameters for selected features\n",
        "ALL_COLUMNS = list(data.columns)\n",
        "ALL_COLUMNS.remove(LABEL_COLUMN)\n",
        "ALL_COLUMNS.remove(USER_COULMN)\n",
        "CONTINUOUS_COLUMNS = list(data._get_numeric_data().columns)\n",
        "CONTINUOUS_COLUMNS.remove(RATING_COLUMN)\n",
        "CATEGORICAL_COLUMNS = list(set(ALL_COLUMNS) - set(CONTINUOUS_COLUMNS))"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {
        "id": "ZQgEzwQOlqT0",
        "gather": {
          "logged": 1646066266056
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Encoding and Data Processing"
      ],
      "metadata": {
        "id": "lMkLfjFICp-q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# encoder function\n",
        "def encoder(df, cols=None):\n",
        "    if cols == None:\n",
        "        cols = list(df.select_dtypes(include=['object']).columns)\n",
        "\n",
        "    val_types = dict()\n",
        "    for c in cols:\n",
        "        val_types[c] = df[c].unique()\n",
        "\n",
        "    val_to_idx = dict()\n",
        "    for k, v in val_types.items():\n",
        "        val_to_idx[k] = {o: i for i, o in enumerate(val_types[k])}\n",
        "\n",
        "    for k, v in val_to_idx.items():\n",
        "        df[k] = df[k].apply(lambda x: v[x])\n",
        "\n",
        "    return val_to_idx, df"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "id": "BTJY5XbxmiTE",
        "gather": {
          "logged": 1646066266149
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#function to test train splitting of data with embedding\n",
        "def data_processing(df, wide_cols, embeddings_cols, continuous_cols, target,\n",
        "    scale=False, def_dim=8):\n",
        "\n",
        "\n",
        "    if type(embeddings_cols[0]) is tuple:\n",
        "        emb_dim = dict(embeddings_cols)\n",
        "        embeddings_cols = [emb[0] for emb in embeddings_cols]\n",
        "    else:\n",
        "        emb_dim = {e:def_dim for e in embeddings_cols}\n",
        "    deep_cols = embeddings_cols+continuous_cols\n",
        "\n",
        "    # Extract the target and copy the dataframe so we don't mutate it\n",
        "    # internally.\n",
        "    Y = np.array(df[target])\n",
        "    all_columns = list(set(wide_cols + deep_cols ))\n",
        "    df_tmp = df.copy()[all_columns]\n",
        "\n",
        "\n",
        "    # Extract the categorical column names that can be one hot encoded later\n",
        "    categorical_columns = list(df_tmp.select_dtypes(include=['object']).columns)\n",
        "\n",
        "    \n",
        "    encoding_dict,df_tmp = encoder(df_tmp)\n",
        "    encoding_dict = {k:encoding_dict[k] for k in encoding_dict if k in deep_cols}\n",
        "    embeddings_input = []\n",
        "    for k,v in encoding_dict.items():\n",
        "        embeddings_input.append((k, len(v), emb_dim[k]))\n",
        "\n",
        "    df_deep = df_tmp[deep_cols]\n",
        "    deep_column_idx = {k:v for v,k in enumerate(df_deep.columns)}\n",
        "\n",
        "\n",
        "    if scale:\n",
        "        scaler = StandardScaler()\n",
        "        for cc in continuous_cols:\n",
        "            df_deep[cc]  = scaler.fit_transform(df_deep[cc].values.reshape(-1,1))\n",
        "\n",
        "    df_wide = df_tmp[wide_cols]\n",
        "    del(df_tmp)\n",
        "    dummy_cols = [c for c in wide_cols if c in categorical_columns]\n",
        "    df_wide = pd.get_dummies(df_wide, columns=dummy_cols)\n",
        "\n",
        "    X_train_deep, X_test_deep = train_test_split(df_deep.values, test_size=0.3, random_state=1463)\n",
        "    X_train_wide, X_test_wide = train_test_split(df_wide.values, test_size=0.3, random_state=1463)\n",
        "    y_train, y_test = train_test_split(Y, test_size=0.3, random_state=1981)\n",
        "\n",
        "    group_dataset = dict()\n",
        "    train_dataset = namedtuple('train_dataset', 'wide, deep, labels')\n",
        "    test_dataset  = namedtuple('test_dataset' , 'wide, deep, labels')\n",
        "    group_dataset['train_dataset'] = train_dataset(X_train_wide, X_train_deep, y_train)\n",
        "    group_dataset['test_dataset']  = test_dataset(X_test_wide, X_test_deep, y_test)\n",
        "    group_dataset['embeddings_input']  = embeddings_input\n",
        "    group_dataset['deep_column_idx'] = deep_column_idx\n",
        "    group_dataset['encoding_dict'] = encoding_dict\n",
        "\n",
        "    return group_dataset\n"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "id": "tUN13LIemiTE",
        "gather": {
          "logged": 1646066266240
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define embedding sizes for categorical cols\n",
        "def categorical_embedding(data,cat_cols):\n",
        "  tup_col = []\n",
        "  for col in cat_cols:\n",
        "    ulen = len(data[col].unique())\n",
        "    if ulen > 100:\n",
        "      ulen = 20\n",
        "    elif ulen > 50:\n",
        "      ulen = 10\n",
        "    else:\n",
        "      ulen = 5\n",
        "    tup_col.append((col,ulen))\n",
        "  return tup_col"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "id": "ot-6IWCGjClw",
        "gather": {
          "logged": 1646066266315
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "PyTorch Wide and Deep Model"
      ],
      "metadata": {
        "id": "EmZLExekjPGC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#class to load the dataset\n",
        "class DatasetLoader(Dataset):\n",
        "    def __init__(self, data):\n",
        "\n",
        "        self.X_wide = data.wide\n",
        "        self.X_deep = data.deep\n",
        "        self.Y = data.labels\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "\n",
        "        xw = self.X_wide[idx]\n",
        "        xd = self.X_deep[idx]\n",
        "        y  = self.Y[idx]\n",
        "\n",
        "        return xw, xd, y\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.Y)\n"
      ],
      "outputs": [],
      "execution_count": 16,
      "metadata": {
        "id": "0vac0moMmiTF",
        "gather": {
          "logged": 1646066266405
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#class defining the wide and deep neural network\n",
        "class WideandDeepNet(nn.Module):\n",
        "\n",
        "    def __init__(self,\n",
        "                 wide_dim,\n",
        "                 embeddings_input,\n",
        "                 continuous_cols,\n",
        "                 deep_column_idx,\n",
        "                 hidden_layers,\n",
        "                 dropout,\n",
        "                 encoding_dict,\n",
        "                 n_class):\n",
        "\n",
        "        super(WideandDeepNet, self).__init__()\n",
        "        self.wide_dim = wide_dim\n",
        "        self.deep_column_idx = deep_column_idx\n",
        "        self.embeddings_input = embeddings_input\n",
        "        self.continuous_cols = continuous_cols\n",
        "        self.hidden_layers = hidden_layers\n",
        "        self.dropout = dropout\n",
        "        self.encoding_dict = encoding_dict\n",
        "        self.n_class = n_class\n",
        "        self.loss_values=[]\n",
        "\n",
        "        # Build the embedding layers to be passed through the deep-side\n",
        "        for col,val,dim in self.embeddings_input:\n",
        "            setattr(self, 'emb_layer_'+col, nn.Embedding(val, dim))\n",
        "\n",
        "        # Build the deep-side hidden layers with dropout if specified\n",
        "        input_emb_dim = np.sum([emb[2] for emb in self.embeddings_input])\n",
        "        self.linear_1 = nn.Linear(input_emb_dim+len(continuous_cols), self.hidden_layers[0])\n",
        "        if self.dropout:\n",
        "            self.linear_1_drop = nn.Dropout(self.dropout[0])\n",
        "        for i,h in enumerate(self.hidden_layers[1:],1):\n",
        "            setattr(self, 'linear_'+str(i+1), nn.Linear( self.hidden_layers[i-1], self.hidden_layers[i] ))\n",
        "            if self.dropout:\n",
        "                setattr(self, 'linear_'+str(i+1)+'_drop', nn.Dropout(self.dropout[i]))\n",
        "\n",
        "        # Connect the wide- and dee-side of the model to the output neuron(s)\n",
        "        self.output = nn.Linear(self.hidden_layers[-1]+self.wide_dim, self.n_class)\n",
        "\n",
        "\n",
        "    def compile(self, optimizer=\"Adam\", learning_rate=0.001, momentum=0.0):        \n",
        "        self.activation, self.criterion = None, F.mse_loss\n",
        "\n",
        "        if optimizer == \"Adam\":\n",
        "            self.optimizer = torch.optim.Adam(self.parameters(), lr=learning_rate)\n",
        "        if optimizer == \"RMSprop\":\n",
        "            self.optimizer = torch.optim.RMSprop(self.parameters(), lr=learning_rate)\n",
        "        if optimizer == \"SGD\":\n",
        "            self.optimizer = torch.optim.SGD(self.parameters(), lr=learning_rate, momentum=momentum)\n",
        "\n",
        "        self.method = 'regression'\n",
        "\n",
        "\n",
        "    def forward(self, X_w, X_d):\n",
        "        # Deep Side\n",
        "        emb = [getattr(self, 'emb_layer_'+col)(X_d[:,self.deep_column_idx[col]].long())\n",
        "               for col,_,_ in self.embeddings_input]\n",
        "        if self.continuous_cols:\n",
        "            cont_idx = [self.deep_column_idx[col] for col in self.continuous_cols]\n",
        "            cont = [X_d[:, cont_idx].float()]\n",
        "            deep_inp = torch.cat(emb+cont, 1)\n",
        "        else:\n",
        "            deep_inp = torch.cat(emb, 1)\n",
        "\n",
        "        x_deep = F.relu(self.linear_1(deep_inp))\n",
        "        if self.dropout:\n",
        "            x_deep = self.linear_1_drop(x_deep)\n",
        "        for i in range(1,len(self.hidden_layers)):\n",
        "            x_deep = F.relu( getattr(self, 'linear_'+str(i+1))(x_deep) )\n",
        "            if self.dropout:\n",
        "                x_deep = getattr(self, 'linear_'+str(i+1)+'_drop')(x_deep)\n",
        "\n",
        "        # Deep + Wide sides\n",
        "        wide_deep_input = torch.cat([x_deep, X_w.float()], 1)\n",
        "\n",
        "        if not self.activation:\n",
        "            out = self.output(wide_deep_input)\n",
        "        else:\n",
        "            out = self.activation(self.output(wide_deep_input))\n",
        "\n",
        "        return out\n",
        "\n",
        "\n",
        "    def fit(self, dataset, n_epochs, batch_size):\n",
        "        widedeep_dataset = DatasetLoader(dataset)\n",
        "        train_loader = torch.utils.data.DataLoader(dataset=widedeep_dataset,\n",
        "                                                   batch_size=batch_size,\n",
        "                                                   shuffle=True)\n",
        "\n",
        "        # set the model in training mode\n",
        "        net = self.train()\n",
        "        for epoch in range(n_epochs):\n",
        "            total=0\n",
        "            correct=0\n",
        "            for i, (X_wide, X_deep, target) in enumerate(train_loader):\n",
        "                X_w = Variable(X_wide)\n",
        "                X_d = Variable(X_deep)\n",
        "                y = (Variable(target).float() if self.method != 'multiclass' else Variable(target))\n",
        "\n",
        "                if use_cuda:\n",
        "                    X_w, X_d, y = X_w.cuda(), X_d.cuda(), y.cuda()\n",
        "\n",
        "                self.optimizer.zero_grad()\n",
        "                y_pred =  net(X_w, X_d)\n",
        "                y_pred = torch.squeeze(y_pred)\n",
        "                loss = self.criterion(y_pred, y)\n",
        "                loss.backward()\n",
        "                self.optimizer.step()\n",
        "\n",
        "                if self.method != \"regression\":\n",
        "                    total+= y.size(0)\n",
        "                    if self.method == 'logistic':\n",
        "                        y_pred_cat = (y_pred > 0.5).squeeze(1).float()\n",
        "                    if self.method == \"multiclass\":\n",
        "                        _, y_pred_cat = torch.max(y_pred, 1)\n",
        "                    correct+= float((y_pred_cat == y).sum().data[0])\n",
        "            self.loss_values.append(loss.item())\n",
        "            print ('Epoch {} of {}, Loss: {}'.format(epoch+1, n_epochs,\n",
        "                    round(loss.item(),3)))\n",
        "\n",
        "\n",
        "    def predict(self, dataset):\n",
        "        X_w = Variable(torch.from_numpy(dataset.wide)).float()\n",
        "        X_d = Variable(torch.from_numpy(dataset.deep))\n",
        "\n",
        "        if use_cuda:\n",
        "            X_w, X_d = X_w.cuda(), X_d.cuda()\n",
        "\n",
        "        # set the model in evaluation mode so dropout is not applied\n",
        "        net = self.eval()\n",
        "        pred = net(X_w,X_d).cpu()\n",
        "        if self.method == \"regression\":\n",
        "            return pred.squeeze(1).data.numpy()\n",
        "        if self.method == \"logistic\":\n",
        "            return (pred > 0.5).squeeze(1).data.numpy()\n",
        "        if self.method == \"multiclass\":\n",
        "            _, pred_cat = torch.max(pred, 1)\n",
        "            return pred_cat.data.numpy()\n",
        "\n",
        "\n",
        "    def get_embeddings(self, col_name):\n",
        "        params = list(self.named_parameters())\n",
        "        emb_layers = [p for p in params if 'emb_layer' in p[0]]\n",
        "        emb_layer  = [layer for layer in emb_layers if col_name in layer[0]][0]\n",
        "        embeddings = emb_layer[1].cpu().data.numpy()\n",
        "        col_label_encoding = self.encoding_dict[col_name]\n",
        "        inv_dict = {v:k for k,v in col_label_encoding.items()}\n",
        "        embeddings_dict = {}\n",
        "        for idx,value in inv_dict.items():\n",
        "            embeddings_dict[value] = embeddings[idx]\n",
        "\n",
        "        return embeddings_dict"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "id": "gXJA7DI2miTF",
        "gather": {
          "logged": 1646066266496
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Final dataset preparation for Training"
      ],
      "metadata": {
        "id": "7M9YKgG9jI8N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# embeddings_cols = [('genres',20), ('userId',100), ('movieId',100)]\n",
        "# crossed_cols = ()\n",
        "# continuous_cols = ['movie_year','gender','age', 'occupation','genres','userId','movieId']"
      ],
      "outputs": [],
      "execution_count": 18,
      "metadata": {
        "id": "swda5nyvq7xG",
        "gather": {
          "logged": 1646066266588
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# reducing embedding cols due to memory limitation\n",
        "REDUCED_CATEGORICAL_COLUMNS = ['Tamil_Customer',\n",
        " 'Peo_Extra_Channels_Purchased_Categorical',\n",
        " 'Bill_Billing_Status',\n",
        " 'VAS_Package',\n",
        " 'Location_Identifier',\n",
        " 'Sub_Usage',\n",
        " 'Product_Type',\n",
        " 'IDD_outgoing_country',\n",
        " 'Sub_Type',\n",
        " 'IDD_incoming_country',\n",
        " 'Having_Insurance']\n"
      ],
      "outputs": [],
      "execution_count": 19,
      "metadata": {
        "id": "5l7Wv93DtjsF",
        "gather": {
          "logged": 1646066266677
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "wide_cols = CONTINUOUS_COLUMNS + [USER_COULMN,LABEL_COLUMN]\n",
        "embeddings_cols = categorical_embedding(data,REDUCED_CATEGORICAL_COLUMNS)\n",
        "continuous_cols = CONTINUOUS_COLUMNS\n",
        "target = RATING_COLUMN"
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {
        "id": "Rz1GAjavmiTF",
        "gather": {
          "logged": 1646066266770
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#split the data and generate the embeddings\n",
        "data_processed = data_processing(\n",
        "        final_df, wide_cols,\n",
        "        embeddings_cols,\n",
        "        continuous_cols,\n",
        "        target,\n",
        "        scale=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/anaconda/envs/azureml_py36/lib/python3.6/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
        }
      ],
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U8fUy_jsmiTF",
        "outputId": "590aef7c-a993-4d7b-cd7f-a7573590d761",
        "gather": {
          "logged": 1646066361943
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Parameters"
      ],
      "metadata": {
        "id": "rzm20bkjo08r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# see if cuda available\n",
        "use_cuda = torch.cuda.is_available()"
      ],
      "outputs": [],
      "execution_count": 22,
      "metadata": {
        "id": "AGj4cJlgpJ_p",
        "gather": {
          "logged": 1646066362502
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Wide and Deep Netowrk Prameters\n",
        "wide_dim = data_processed['train_dataset'].wide.shape[1]\n",
        "n_unique = len(np.unique(data_processed['train_dataset'].labels))\n",
        "n_class = 1\n",
        "\n",
        "deep_column_idx = data_processed['deep_column_idx']\n",
        "embeddings_input= data_processed['embeddings_input']\n",
        "encoding_dict   = data_processed['encoding_dict']\n",
        "hidden_layers = [100,50]\n",
        "dropout = [0.5,0.2]\n"
      ],
      "outputs": [],
      "execution_count": 23,
      "metadata": {
        "id": "rq6O25_mmiTG",
        "gather": {
          "logged": 1646066362578
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Build Model"
      ],
      "metadata": {
        "id": "IdIZsyOQpZHE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# build model\n",
        "use_cuda = torch.cuda.is_available()\n",
        "\n",
        "model = WideandDeepNet(\n",
        "    wide_dim,\n",
        "    embeddings_input,\n",
        "    continuous_cols,\n",
        "    deep_column_idx,\n",
        "    hidden_layers,\n",
        "    dropout,\n",
        "    encoding_dict,\n",
        "    n_class)\n",
        "model.compile(optimizer='Adam')\n",
        "if use_cuda:\n",
        "    model = model.cuda()"
      ],
      "outputs": [],
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "S5Ch6ChWmiTG",
        "outputId": "9fac3b39-3267-4383-f1e0-a644889eb95a",
        "gather": {
          "logged": 1646066398828
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train Model"
      ],
      "metadata": {
        "id": "1RfsqOQTpFul"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#train the model\n",
        "train_dataset = data_processed['train_dataset']\n",
        "model.fit(dataset=train_dataset, n_epochs=5, batch_size=60)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1 of 5, Loss: nan\nEpoch 2 of 5, Loss: nan\nEpoch 3 of 5, Loss: nan\nEpoch 4 of 5, Loss: nan\nEpoch 5 of 5, Loss: nan\n"
        }
      ],
      "execution_count": 25,
      "metadata": {
        "id": "SNNV_rkqmiTH",
        "outputId": "c79e2c83-8c6a-4fe6-e7b9-f68b8e85a4bc",
        "gather": {
          "logged": 1646066525282
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Prdictions"
      ],
      "metadata": {
        "id": "C5VQPs4dpdZm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_dataset  = data_processed['test_dataset']"
      ],
      "outputs": [],
      "execution_count": 26,
      "metadata": {
        "id": "mP1HGj8FmiTH",
        "gather": {
          "logged": 1646066525444
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(dataset=test_dataset)"
      ],
      "outputs": [],
      "execution_count": 27,
      "metadata": {
        "id": "jYrQomZGmiTH",
        "gather": {
          "logged": 1646066526082
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = test_dataset.labels"
      ],
      "outputs": [],
      "execution_count": 28,
      "metadata": {
        "id": "RSjcwHXKmiTH",
        "gather": {
          "logged": 1646066526231
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Evaluation"
      ],
      "metadata": {
        "id": "mpm99BEDpiMN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#get the test MSE\n",
        "mean_squared_error(y_pred,y)"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Input contains NaN, infinity or a value too large for dtype('float32').",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-4b763f1fba0c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#get the test MSE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput, squared)\u001b[0m\n\u001b[1;32m    334\u001b[0m     \"\"\"\n\u001b[1;32m    335\u001b[0m     y_type, y_true, y_pred, multioutput = _check_reg_targets(\n\u001b[0;32m--> 336\u001b[0;31m         y_true, y_pred, multioutput)\n\u001b[0m\u001b[1;32m    337\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m     output_errors = np.average((y_true - y_pred) ** 2, axis=0,\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     87\u001b[0m     \"\"\"\n\u001b[1;32m     88\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    719\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    720\u001b[0m             _assert_all_finite(array,\n\u001b[0;32m--> 721\u001b[0;31m                                allow_nan=force_all_finite == 'allow-nan')\n\u001b[0m\u001b[1;32m    722\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    723\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    104\u001b[0m                     \u001b[0mmsg_err\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m                     (type_err,\n\u001b[0;32m--> 106\u001b[0;31m                      msg_dtype if msg_dtype is not None else X.dtype)\n\u001b[0m\u001b[1;32m    107\u001b[0m             )\n\u001b[1;32m    108\u001b[0m     \u001b[0;31m# for object dtype data, we only check for NaNs (GH-13254)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."
          ]
        }
      ],
      "execution_count": 29,
      "metadata": {
        "id": "JUY_o0rXmiTH",
        "outputId": "8ff3769f-67c7-434f-a8e8-20fa93e9248d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#get the test MAE\n",
        "mean_absolute_error(y_pred,y)"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Input contains NaN, infinity or a value too large for dtype('float32').",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-a68007b61d21>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#get the test MAE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmean_absolute_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36mmean_absolute_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput)\u001b[0m\n\u001b[1;32m    181\u001b[0m     \"\"\"\n\u001b[1;32m    182\u001b[0m     y_type, y_true, y_pred, multioutput = _check_reg_targets(\n\u001b[0;32m--> 183\u001b[0;31m         y_true, y_pred, multioutput)\n\u001b[0m\u001b[1;32m    184\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m     output_errors = np.average(np.abs(y_pred - y_true),\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     87\u001b[0m     \"\"\"\n\u001b[1;32m     88\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    719\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    720\u001b[0m             _assert_all_finite(array,\n\u001b[0;32m--> 721\u001b[0;31m                                allow_nan=force_all_finite == 'allow-nan')\n\u001b[0m\u001b[1;32m    722\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    723\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    104\u001b[0m                     \u001b[0mmsg_err\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m                     (type_err,\n\u001b[0;32m--> 106\u001b[0;31m                      msg_dtype if msg_dtype is not None else X.dtype)\n\u001b[0m\u001b[1;32m    107\u001b[0m             )\n\u001b[1;32m    108\u001b[0m     \u001b[0;31m# for object dtype data, we only check for NaNs (GH-13254)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."
          ]
        }
      ],
      "execution_count": 36,
      "metadata": {
        "id": "uoDoW9xtmiTH",
        "outputId": "3dbc371d-9fb4-43c4-ccdf-5f4d128111c3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#plt the train error of model\n",
        "plt.plot(model.loss_values)\n",
        "plt.ylabel('Train Error')\n",
        "plt.xlabel('epoch')\n",
        "plt.title(\"Train error for models initial settings\")\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 37,
      "metadata": {
        "id": "QJgz9xvimiTI",
        "outputId": "b2c8a0bb-48ac-4b5c-a734-e7e5ddfee79a",
        "gather": {
          "logged": 1642939733412
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## hyperparameter tuning"
      ],
      "metadata": {
        "id": "t2cHcowPmiTI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### for the gradient descent algorithm"
      ],
      "metadata": {
        "id": "Yd9-mbyLmiTI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "models = []\n",
        "methods = [\"Adam\",\"RMSprop\"]"
      ],
      "outputs": [],
      "execution_count": 38,
      "metadata": {
        "id": "_VFPGIZZmiTI",
        "gather": {
          "logged": 1642939800887
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for method in methods:\n",
        "    model = WideandDeepNet(\n",
        "        wide_dim,\n",
        "        embeddings_input,\n",
        "        continuous_cols,\n",
        "        deep_column_idx,\n",
        "        hidden_layers,\n",
        "        dropout,\n",
        "        encoding_dict,\n",
        "        n_class)\n",
        "    model.compile(optimizer=method)\n",
        "    if use_cuda:\n",
        "        model = model.cuda()\n",
        "    model.fit(dataset=train_dataset, n_epochs=5, batch_size=60)\n",
        "    models.append(model)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1 of 5, Loss: nan\nEpoch 2 of 5, Loss: nan\nEpoch 3 of 5, Loss: nan\nEpoch 4 of 5, Loss: nan\nEpoch 5 of 5, Loss: nan\nEpoch 1 of 5, Loss: nan\nEpoch 2 of 5, Loss: nan\nEpoch 3 of 5, Loss: nan\nEpoch 4 of 5, Loss: nan\nEpoch 5 of 5, Loss: nan\n"
        }
      ],
      "execution_count": 39,
      "metadata": {
        "id": "rpcT8ZrjmiTI",
        "outputId": "979583aa-bf3d-4837-8985-5fd6de6593e7",
        "gather": {
          "logged": 1642939841179
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for model in models:\n",
        "    plt.plot(np.arange(5),model.loss_values)\n",
        "plt.ylabel('Train Error')\n",
        "plt.xlabel('epoch')\n",
        "\n",
        "plt.legend(methods, loc='upper left')\n",
        "plt.title(\"Train error for different GD algorithms\")\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 40,
      "metadata": {
        "id": "09u9e--pmiTI",
        "outputId": "3b2d2249-f3ef-4435-822f-6d1e14c93eb6",
        "gather": {
          "logged": 1642939844381
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for model in models:\n",
        "    print(\"for \"+ str(model.optimizer))\n",
        "    y_pred = model.predict(dataset=test_dataset)\n",
        "    y = test_dataset.labels\n",
        "    # print(\"test mean squared error: \"+str(mean_squared_error(y_pred,y)))\n",
        "    # print(\"test mean absolute error: \"+ str(mean_absolute_error(y_pred,y)))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "for Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)\nfor RMSprop (\nParameter Group 0\n    alpha: 0.99\n    centered: False\n    eps: 1e-08\n    lr: 0.001\n    momentum: 0\n    weight_decay: 0\n)\n"
        }
      ],
      "execution_count": 42,
      "metadata": {
        "id": "I0E2dRlPmiTJ",
        "outputId": "4a60faf3-ee13-44a5-e62f-6f9c629bcabd",
        "gather": {
          "logged": 1642939880863
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### optimizing dropout values"
      ],
      "metadata": {
        "id": "kGVkGsm4miTJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "droupouts = [0,0.1,0.5]\n",
        "models_dropout=[]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "k3yxikFymiTJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for droupout in droupouts:\n",
        "    dropout = [droupout,droupout]\n",
        "    model = WideandDeepNet(\n",
        "        wide_dim,\n",
        "        embeddings_input,\n",
        "        continuous_cols,\n",
        "        deep_column_idx,\n",
        "        hidden_layers,\n",
        "        dropout,\n",
        "        encoding_dict,\n",
        "        n_class)\n",
        "    model.compile(optimizer=\"Adam\")\n",
        "    if use_cuda:\n",
        "        model = model.cuda()\n",
        "    model.fit(dataset=train_dataset, n_epochs=3, batch_size=60)\n",
        "    models_dropout.append(model)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1 of 3, Loss: 0.686\nEpoch 2 of 3, Loss: 3.3\nEpoch 3 of 3, Loss: 1.797\nEpoch 1 of 3, Loss: 2.098\nEpoch 2 of 3, Loss: 0.771\nEpoch 3 of 3, Loss: 4.375\nEpoch 1 of 3, Loss: 1.159\nEpoch 2 of 3, Loss: 0.724\nEpoch 3 of 3, Loss: 1.163\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "soJu-6nXmiTJ",
        "outputId": "7c81a879-4976-4326-b5d9-ea757dae8bdc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for model in models_dropout:\n",
        "    plt.plot(np.arange(3),model.loss_values)\n",
        "plt.ylabel('Train Error')\n",
        "plt.xlabel('epoch')\n",
        "\n",
        "plt.legend(droupouts, loc='upper left')\n",
        "plt.title(\"Train error for different dropouts\")\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "2_O0ypRemiTJ",
        "outputId": "1e645732-c743-4829-f7f9-bb0019914ce0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for model in models_dropout:\n",
        "    print(\"for drououts: \"+ str(model.dropout))\n",
        "    y_pred = model.predict(dataset=test_dataset)\n",
        "    y = test_dataset.labels\n",
        "    print(\"test mean squared error: \"+str(mean_squared_error(y_pred,y)))\n",
        "    print(\"test mean absolute error: \"+ str(mean_absolute_error(y_pred,y)))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "for drououts: [0, 0]\ntest mean squared error: 1.327298705029263\ntest mean absolute error: 0.9674445709737696\nfor drououts: [0.1, 0.1]\ntest mean squared error: 1.4589379506428217\ntest mean absolute error: 1.003326960903818\nfor drououts: [0.5, 0.5]\ntest mean squared error: 1.3582297251538353\ntest mean absolute error: 0.9704529255707942\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "Ou0lsYy7miTJ",
        "outputId": "d36c473d-621c-4c33-dd09-16775a7a1b94"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluating the model with optimal hyperparameters"
      ],
      "metadata": {
        "id": "fki2tqlHmiTJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropout = [0.5,0.5]\n",
        "model = WideandDeepNet(\n",
        "    wide_dim,\n",
        "    embeddings_input,\n",
        "    continuous_cols,\n",
        "    deep_column_idx,\n",
        "    hidden_layers,\n",
        "    dropout,\n",
        "    encoding_dict,\n",
        "    n_class)\n",
        "model.compile(optimizer=\"Adam\")\n",
        "if use_cuda:\n",
        "    model = model.cuda()\n",
        "model.fit(dataset=train_dataset, n_epochs=10, batch_size=60)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1 of 10, Loss: 2.669\nEpoch 2 of 10, Loss: 0.893\nEpoch 3 of 10, Loss: 2.157\nEpoch 4 of 10, Loss: 1.586\nEpoch 5 of 10, Loss: 1.628\nEpoch 6 of 10, Loss: 1.359\nEpoch 7 of 10, Loss: 0.64\nEpoch 8 of 10, Loss: 2.361\nEpoch 9 of 10, Loss: 1.098\nEpoch 10 of 10, Loss: 2.597\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "8Wmffy-LmiTK",
        "outputId": "c21dafe6-ce21-4857-87ad-fc4e650615b6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(np.arange(10),model.loss_values)\n",
        "plt.ylabel('Train Error')\n",
        "plt.xlabel('epoch')\n",
        "\n",
        "plt.title(\"Train error for optimal model\")\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "b8wQiomMmiTK",
        "outputId": "a7238b91-7375-4542-9a23-478acaf0c856"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(dataset=test_dataset)\n",
        "y = test_dataset.labels\n",
        "print(\"test mean squared error: \"+str(mean_squared_error(y_pred,y)))\n",
        "print(\"test mean absolute error: \"+ str(mean_absolute_error(y_pred,y)))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "test mean squared error: 1.3538917806265323\ntest mean absolute error: 0.9229052796107362\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "DZyDxlF6miTK",
        "outputId": "22a4b015-204f-4965-d25c-681be92caec0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### calcualte the time to run the model for different subsets"
      ],
      "metadata": {
        "id": "Ul9o3HX3miTK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "unique_users = final_df['userId'].unique()\n",
        "user_quantiles = np.arange(0.1,1,0.1)\n",
        "runtimes = []"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "7tG_ysT_miTK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "for quantile in user_quantiles:\n",
        "    start_time = time.time()\n",
        "    subset_users = unique_users[:int(len(unique_users)*quantile)]\n",
        "    subset_df = final_df.loc[final_df['userId'].isin(subset_users)]\n",
        "    data_processed = data_processing(\n",
        "        subset_df, wide_cols,\n",
        "        embeddings_cols,\n",
        "        continuous_cols,\n",
        "        target,\n",
        "        scale=True)\n",
        "    model = WideandDeepNet(\n",
        "        wide_dim,\n",
        "        embeddings_input,\n",
        "        continuous_cols,\n",
        "        deep_column_idx,\n",
        "        hidden_layers,\n",
        "        dropout,\n",
        "        encoding_dict,\n",
        "        n_class)\n",
        "    model.compile(optimizer='Adam')\n",
        "    if use_cuda:\n",
        "        model = model.cuda()\n",
        "    train_dataset = data_processed['train_dataset']\n",
        "    model.fit(dataset=train_dataset, n_epochs=1, batch_size=60)\n",
        "    end_time = time.time()\n",
        "    total_time = end_time- start_time\n",
        "    print(\"total time:\" + str(total_time))\n",
        "    runtimes.append(total_time)\n",
        "    "
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/home/roxor/bin/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n  warnings.warn(msg, DataConversionWarning)\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1 of 1, Loss: 0.329\ntotal time:2.0968427658081055\nEpoch 1 of 1, Loss: 0.713\ntotal time:4.748933792114258\nEpoch 1 of 1, Loss: 0.85\ntotal time:6.54540753364563\nEpoch 1 of 1, Loss: 1.187\ntotal time:9.715687036514282\nEpoch 1 of 1, Loss: 1.218\ntotal time:11.353285074234009\nEpoch 1 of 1, Loss: 0.659\ntotal time:13.029703378677368\nEpoch 1 of 1, Loss: 0.407\ntotal time:15.628254652023315\nEpoch 1 of 1, Loss: 1.535\ntotal time:17.98717498779297\nEpoch 1 of 1, Loss: 2.209\ntotal time:20.148995876312256\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "i2tEjew0miTK",
        "outputId": "1321a62e-3f12-4599-f1f4-2e50a5c23c91"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(user_quantiles,runtimes)\n",
        "plt.ylabel('Runtime')\n",
        "plt.xlabel('quantile size')\n",
        "\n",
        "plt.title(\"Runtime for optimal model for different subset size\")\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {}
        }
      ],
      "execution_count": null,
      "metadata": {
        "id": "aNtuAmVYmiTK",
        "outputId": "bc9660f6-9e9c-45ae-bb04-1f1dea40dab2"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "name": "up-selling-wide-deep-model.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "Yd9-mbyLmiTI",
        "kGVkGsm4miTJ",
        "fki2tqlHmiTJ",
        "Ul9o3HX3miTK"
      ]
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}